name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r thoughts_app_service/requirements.txt
      - name: Lint with Black
        run: |
          pip install black
          black --check thoughts_app_service/thoughts_app
      - name: Lint with isort
        run: |
          pip install isort
          isort --check-only thoughts_app_service/thoughts_app
      - name: Prepare environment file
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> thoughts_app_service/.env
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> thoughts_app_service/.env
          echo "ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> thoughts_app_service/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> thoughts_app_service/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> thoughts_app_service/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> thoughts_app_service/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> thoughts_app_service/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> thoughts_app_service/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> thoughts_app_service/.env
      - name: Prepare Docker Compose
        run: |
          docker build -t thoughts_app_service -f thoughts_app_service/Dockerfile thoughts_app_service/
      - name: Run Django tests inside Docker compose
        run: |
          docker compose run --rm web python thoughts_app/manage.py test thoughts_core thoughts_app

  deploy:
    # needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Prepare environment file
        run: |
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> thoughts_app_service/.env
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> thoughts_app_service/.env
          echo "ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> thoughts_app_service/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> thoughts_app_service/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> thoughts_app_service/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> thoughts_app_service/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> thoughts_app_service/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> thoughts_app_service/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> thoughts_app_service/.env

      - name: Prepare for connecting to VPS
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          echo "Host ${{ secrets.SERVER_IP }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  User ${{ secrets.SERVER_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Ensure Docker is installed on the VPS
        run: |
          scp install_docker.sh ${USER}@${HOST}:~/
          ssh ${USER}@${HOST} "chmod +x ~/install_docker.sh && ~/install_docker.sh"
        env:
          USER: ${{ secrets.SERVER_USER }}
          HOST: ${{ secrets.SERVER_IP }}

      - name: Deploy to VPS
        run: |
          ssh ${USER}@${HOST} "mkdir -p ~/ThoughtsApp"
          scp * ${USER}@${HOST}:~/ThoughtsApp
          ssh${USER}@${HOST} "cd ~/ThoughtsApp && docker compose down && docker compose up -d --build"
        env:
          USER: ${{ secrets.SERVER_USER }}
          HOST: ${{ secrets.SERVER_IP }}
        
